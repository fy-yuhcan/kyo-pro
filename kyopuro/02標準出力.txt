#.join
#.joinは、() の中で指定された要素を　.　の前で指定されたもので区切る
print(",".join(S))

#for in　を数値だけじゃなくて文字列で回して使う　range使わない
s = input().split()

for i in s:
    print(i, end=",")

print()

#10個の出力を　" | "　で区切って出力する
#10回ループ
for i in range(10):
    #10回目だったらストップ
    if i == 9:
        print(input())
    #10回目じゃなかったら続ける
    else:
        print(input(), end=" | ")


#{Cランク相当}入力された文字列を3桁ごとにカンマを入れる
n=input()
#文字数を考えるのでrangeは入力の文字数,また一文字ずつループ
for i in range(len(n)):
#もしiが四回目=3桁の次だったら、また、0=最初だったら、
    if i %3 == 0 and i!=0:
    #カンマを加えて、改行なしの出力をして、
        print(",",end="")
    #そうじゃない時は、iの回数目のnを出力する
    print(n[i], end="")
#これは改行なし用
print()

#{Cランク相当}入力された文字列を3桁ごとにカンマを入れる(3の倍数とは限らない)
N = input()
#ここで余りになるものは格納
x = len(N) % 3

for i in range(len(N)):
#もしiが余りから引かれたものので３の倍数の時、
    if (i - x) % 3 == 0 and i != 0:
        print(",", end="")

    print(N[i], end="")

print()


#3 * 3 の出力
#これがそのまま参考になった
リストの要素 (N[i]) は毎回同様の出力をするので簡略して書き、出力する文字列の様子を{出力する値}のように書きます。
i=0 : 半角スペースを改行無しで出力 {N[0] }
i=1 : 半角スペースを改行無しで出力 (N[0] N[1] )
i=2 : 改行する {N[0] N[1] N[2] (改行)}
i=3 : 半角スペースを改行無しで出力 {N[0] N[1] N[2] (改行) N[3] }
( 以下同様に出力する )
N = input().split()

for i in range(len(N)):
    print(N[i], end="")
    if i % 3 == 2:
        print()
    else:
        print(" ", end="")

#二重ループ
for i in range(1, 10):
    for j in range(1, 10):
        if j == 9:
            print(i * j)
        else:
            print(i * j, end=" ")

#N*Nの出力
N = int(input())

for i in range(1, N + 1):
    for j in range(1, N + 1):
        if j == N:
            print(i * j)
        else:
            print(i * j, end=" ")


#N//2の時改行
N = int(input())

for i in range(1, N + 1):
ここでN//2の余りが0の時、としているので割り切れるときの数のみ改行することになる
    if i % (N // 2) == 0:
        print(i)
    else:
        print(i, end=" ")


#すべての行の長さが不定な 2 次元配列の出力 
n = int(input())  # 入力: 要素の数
m = list(map(int, input().split()))  # 入力: スペース区切りの整数をリストに変換

for i in range(n):  # 外側のループ: 各要素に対して処理を行う
    for t in range(1, m[i] + 1):  # 内側のループ: 1からm[i]までの数を出力
        if t == m[i]:
            print(t)
        else:
            print(t, end=" ")
    print()  # 各 m[i] の処理後に改行を追加
外側のループ (i) の最初の反復では、i = 0 で m[0] = 2 です。

内側のループ (t) では、1 2 と出力されます。
次の反復では、i = 1 で m[1] = 3 です。

内側のループ (t) では、1 2 3 と出力されます。
最後の反復では、i = 2 で m[2] = 4 です。

内側のループ (t) では、1 2 3 4 と出力されます。
#ループで,m[t]ではなく、m[i]を使うのはiがそのときのmのリストの数を保有しているから

#{復習必須！！！！！}【行によって長さが違う二次元配列の表示】すべての行の長さと値が不定な 2 次元配列の出力
values = input().split()
N = int(values[0])
M = int(values[1])

A = [0] * N
values = input().split()
for i in range(N):
    A[i] = int(values[i])

B = [0] * M
values = input().split()
for i in range(M):
    B[i] = int(values[i])

head = 0
for i in B:
    for j in range(i):
        if j == i - 1:
            print(A[head])
        else:
            print(A[head], end=" ")

        head += 1
##############復讐する！！！！################
#多分この方がわかりやすい
Aの数列をBの区間で区切るという考え方
N, M = map(int, input().split())
A = list(map(int, input().split()))
B = list(map(int, input().split()))

始点から終点までを一つの区間として考えれば区切れる
begin = 0
for i in range(M):
    length = B[i]
    #終点は始まりからBの区間から-1
    end = begin + length - 1
    
    for j in range(begin, end + 1):
        if j == end:
            print(A[j])
        else:
            print(A[j], end=" ")
    
    begin = end + 1

#print("{:.{}f}".format(n, m))
#format(n,m)の引数の数によってnの小数点をmで指定する

#print("{: >3}".format(N))
#{}の中身は >3とすることで、3に満たないときは空白で埋めるということになる

#第二引数で指定した変数で埋める
{: >{}}

#{復習必須！！！！！！！！}九九表を罫線入りで出力
#出力形式を指定して出力】ペアの数値の入った表を罫線入りで出力 2　これも復習
for i in range(1, 10):
    for j in range(1, 10):
        print("{: >2}".format(i * j), end="")
        if j == 9:
            print()
        else:
            print(end=" | ")

    if i < 9:
        print("=" * (2 * 9 + 3 * (9 - 1)))